#!/usr/bin/env bash

# ========================
# Script: analysis
# Author: Danyan Chen
# Student id : 24063952
# Description:
#   
# ========================


# ---------- Get parameters & Validate parameters -------------
file_path=$1

if test $# -ne 1  
then 
    echo "Error: Expected 1 argument, but got $#, usage: ./analysis <file_path>" >&2
    exit 1
fi


if test ! -s "$file_path"
then
    echo "Error: The specified input file '$file_path' does not exist or is empty." >&2
    exit 1
fi


gawk '
function find_max(array) 
{
        max_val = 0
        for (k in array) {
            if (array[k] > max_val) {
                max_val = array[k]
                max_key = k
            }
        }
        return max_key "&&" max_val
}

function pearson_r(name, n, sum_x, sum_y, sum_x_y, sum_x2, sum_y2)
{
    n = var_n[name]
    sum_x=var_sum_x[name] 
    sum_y=var_sum_y[name]
    sum_x2=var_sum_x2[name] 
    sum_y2=var_sum_y2[name] 
    sum_x_y=var_sum_xy[name]

    a = (n*sum_x_y - sum_x*sum_y)
    b = (n*sum_x2 - sum_x*sum_x) * (n*sum_y2 - sum_y*sum_y)

    if (b <= 0) return "undefined"

    c = sqrt(b)
    r = a/c
    return r
}

function pearson_variables(x, y, name){
    x_clean = x
    y_clean = y
    gsub(/[ \t\r\n]+/, "", x_clean)
    gsub(/[ \t\r\n]+/, "", y_clean)
    if(x_clean !="" && y_clean !=""){
        var_n[name]++
        var_sum_x[name] += x
        var_sum_y[name] += y
        var_sum_x2[name] += x * x
        var_sum_y2[name] += y * y
        var_sum_xy[name] += x * y
    }
}


BEGIN{
    FS ="\t"

    # Mechanics and Domains counts
    delete mechanic_count
    delete domain_count

    # Correlation accumulators (by key)
    delete var_n
    delete var_sum_x
    delete var_sum_y
    delete var_sum_xy
    delete var_sum_x2
    delete var_sum_y2
}

{
# ---------- Q1 The most popular game mechanics is xxx found in xx games -------------

    # Incase some empty field with multiple space
    # $13 is the column mechanics
    clean_mechanic = $13
    gsub(/[ \t\r\n]+/, "", clean_mechanic)

    
    # skip header and skip the empty field
    if(NR>1 && clean_mechanic !=""){

        # split(string, array, separator)
        split($13, row_values, "," )

        for(i=1;i<=length(row_values);i++){

            # Replace the possible space with ""
            gsub(/^ +| +$/,"",row_values[i])
            mechanic_count[row_values[i]]++
        }

    }

# ---------- Q2 The most style of game is xxx found in xx games -------------

    # Incase some empty field with multiple space
    # $14 is the column domains
    clean_domain = $14
    gsub(/[ \t\r\n]+/, "", clean_domain)

    
    # skip header and skip the empty field
    if(NR>1 && clean_domain !=""){

        # split(string, array, separator)
        split($14, row_values, "," )

        for(i=1;i<=length(row_values);i++){

            # Replace the possible space with ""
            gsub(/^ +| +$/,"",row_values[i])
            domain_count[row_values[i]]++
        }

    }

    if (NR>1){
        # Q3
        pearson_variables($3,$9, "year_rating")

        # Q4
        pearson_variables($11,$9, "complexity_rating")
    
    }

}

END{
    # Q1
    split(find_max(mechanic_count), mparts, "&&")
    # Q2
    split(find_max(domain_count), dparts, "&&")
    # Q3
    r_year = pearson_r("year_rating")
    # Q4
    r_complexity = pearson_r("complexity_rating")

    print "The most popular game mechanics is", mparts[1], "found in", mparts[2], "games"
    print "The most style of game is", dparts[1], "found in", dparts[2], "games"
    if (r_year == "undefined") {
        print "The varelation between the year of publication and the average rating is undefined (zero variance or numeric error)"
    } else {
        printf "The varelation between the year of publication and the average rating is %.3f\n", r_year
    }

    if (r_complexity == "undefined") {
        print "The correlation between the complexity of a game and its average rating is undefined (zero variance or numeric error)"
    } else {
        printf "The correlation between the complexity of a game and its average rating is %.3f\n", r_complexity
    }

}
' "$file_path"